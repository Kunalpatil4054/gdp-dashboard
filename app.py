# -*- coding: utf-8 -*-
"""Copy of Financials_Colab_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ke6scs8vUqOYZ6otK1A6QOn8q0vuZn2I
"""

# STEP 1 — Mount Google Drive

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# STEP 2 — Load the dataset into a DataFrame named `df`
import pandas as pd

file_path = '/content/Financials.csv'  # <-- UPDATE THIS PATH
df = pd.read_csv(file_path)
print("Shape:", df.shape)
print(df.head())

# STEP 3 — Setup, cleaning, and type conversions
import numpy as np
import re
import matplotlib.pyplot as plt

# Make a safe copy
df_raw = df.copy()

# 3.1 — Normalize column names (strip whitespace)
df.columns = [c.strip() for c in df.columns]

# 3.2 — Helper to convert currency/number-like strings to floats
def to_float(x):
    if pd.isna(x):
        return np.nan
    s = str(x).strip()
    if s in ['-', '$-', 'n/a', 'NA', 'None', 'none', 'Null', 'null', '']:
        return 0.0
    s = s.replace('$','').replace(',','').strip()
    try:
        return float(s)
    except:
        m = re.search(r'-?\d+(\.\d+)?', s)
        return float(m.group(0)) if m else np.nan

# 3.3 — Try to convert known numeric columns (skip those that don't exist)
numeric_like = ['Units Sold','Manufacturing Price','Sale Price','Gross Sales',
                'Discounts','Sales','COGS','Profit']
for c in numeric_like:
    if c in df.columns:
        df[c] = df[c].apply(to_float)

# 3.4 — Parse dates if present
if 'Date' in df.columns:
    # Many "Financials.csv" samples use day-first format (e.g., 01-01-14)
    df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')

# 3.5 — Basic sanity checks
print("After cleaning — dtypes:")
print(df.dtypes)
print("\nNull counts:")
print(df.isna().sum())

# STEP 4 — Overview & quick stats
# Head/tail and descriptive statistics for numeric columns
display(df.head(3))
display(df.tail(3))
display(df.describe(include='all'))

# STEP 5 — Feature engineering (derived metrics)
# Only create columns if source columns exist

if set(['Sales','COGS']).issubset(df.columns):
    df['Gross_Margin_%'] = np.where(df['Sales'] != 0, df['Profit'] / df['Sales'], np.nan) * 100

if set(['Discounts','Gross Sales']).issubset(df.columns):
    df['Discount_Rate_%'] = np.where(df['Gross Sales'] != 0, df['Discounts'] / df['Gross Sales'], np.nan) * 100

if set(['Sales','Units Sold']).issubset(df.columns):
    df['Avg_Selling_Price'] = np.where(df['Units Sold'] != 0, df['Sales'] / df['Units Sold'], np.nan)

if set(['COGS','Units Sold']).issubset(df.columns):
    df['Unit_COGS'] = np.where(df['Units Sold'] != 0, df['COGS'] / df['Units Sold'], np.nan)

if set(['Profit','Units Sold']).issubset(df.columns):
    df['Unit_Profit'] = np.where(df['Units Sold'] != 0, df['Profit'] / df['Units Sold'], np.nan)

print("New columns created (if available):", [c for c in ['Gross_Margin_%','Discount_Rate_%','Avg_Selling_Price','Unit_COGS','Unit_Profit'] if c in df.columns])
display(df.head())

# STEP 6 — Overall KPIs
kpis = {}
if 'Sales' in df.columns:
    kpis['Total Sales'] = float(df['Sales'].sum())
if 'Profit' in df.columns:
    kpis['Total Profit'] = float(df['Profit'].sum())
if 'Units Sold' in df.columns:
    kpis['Total Units'] = float(df['Units Sold'].sum())
if 'Sales' in df.columns and 'Profit' in df.columns and df['Sales'].sum() != 0:
    kpis['Overall Gross Margin %'] = float((df['Profit'].sum()/df['Sales'].sum())*100)

print("KPIs:")
for k,v in kpis.items():
    print(f"{k}: {v:,.2f}")

# STEP 7 — Yearly performance (Sales, Profit, Units) & YoY growth
import pandas as pd
if 'Year' in df.columns:
    yearly = df.groupby('Year').agg({
        **({'Sales':'sum'} if 'Sales' in df.columns else {}),
        **({'Profit':'sum'} if 'Profit' in df.columns else {}),
        **({'Units Sold':'sum'} if 'Units Sold' in df.columns else {})
    }).sort_index()

    # YoY growth where applicable
    for col in yearly.columns:
        yearly[f'{col}_YoY_%'] = yearly[col].pct_change()*100

    display(yearly)

# STEP 8 — Monthly seasonality (averaged across years)
if {'Month Number','Month Name'}.issubset(df.columns) and 'Sales' in df.columns:
    monthly = df.groupby(['Month Number','Month Name'], as_index=False)['Sales'].sum().sort_values('Month Number')
    display(monthly)

    plt.figure()
    plt.bar(monthly['Month Name'], monthly['Sales'])
    plt.title('Monthly Sales (All Years)')
    plt.xlabel('Month'); plt.ylabel('Sales'); plt.xticks(rotation=45); plt.grid(axis='y')
    plt.show()
else:
    print("Month fields or 'Sales' not found; skipping monthly seasonality.")

# STEP 9 — Top 10 Products by Sales and Profit
if 'Product' in df.columns:
    if 'Sales' in df.columns:
        top_prod_sales = df.groupby('Product')['Sales'].sum().sort_values(ascending=False).head(10)
        display(top_prod_sales)

        plt.figure()
        plt.bar(top_prod_sales.index.astype(str), top_prod_sales.values)
        plt.title('Top 10 Products by Sales')
        plt.xlabel('Product'); plt.ylabel('Sales'); plt.xticks(rotation=60, ha='right'); plt.grid(axis='y')
        plt.show()

    if 'Profit' in df.columns:
        top_prod_profit = df.groupby('Product')['Profit'].sum().sort_values(ascending=False).head(10)
        display(top_prod_profit)

        plt.figure()
        plt.bar(top_prod_profit.index.astype(str), top_prod_profit.values)
        plt.title('Top 10 Products by Profit')
        plt.xlabel('Product'); plt.ylabel('Profit'); plt.xticks(rotation=60, ha='right'); plt.grid(axis='y')
        plt.show()
else:
    print("Column 'Product' not found; skipping product analysis.")

# STEP 10 — Top 10 Countries by Sales and Profit
if 'Country' in df.columns:
    if 'Sales' in df.columns:
        top_ctry_sales = df.groupby('Country')['Sales'].sum().sort_values(ascending=False).head(10)
        display(top_ctry_sales)

        plt.figure()
        plt.bar(top_ctry_sales.index.astype(str), top_ctry_sales.values)
        plt.title('Top 10 Countries by Sales')
        plt.xlabel('Country'); plt.ylabel('Sales'); plt.xticks(rotation=60, ha='right'); plt.grid(axis='y')
        plt.show()

    if 'Profit' in df.columns:
        top_ctry_profit = df.groupby('Country')['Profit'].sum().sort_values(ascending=False).head(10)
        display(top_ctry_profit)

        plt.figure()
        plt.bar(top_ctry_profit.index.astype(str), top_ctry_profit.values)
        plt.title('Top 10 Countries by Profit')
        plt.xlabel('Country'); plt.ylabel('Profit'); plt.xticks(rotation=60, ha='right'); plt.grid(axis='y')
        plt.show()
else:
    print("Column 'Country' not found; skipping country analysis.")

# STEP 11 — Segment analysis (Sales & Gross Margin %) with LINE charts and spacing
if 'Segment' in df.columns:
    agg_map = {}
    if 'Sales' in df.columns:
        agg_map['Sales'] = 'sum'
    if 'Profit' in df.columns:
        agg_map['Profit'] = 'sum'
    if 'Units Sold' in df.columns:
        agg_map['Units Sold'] = 'sum'

    seg = df.groupby('Segment').agg(agg_map)
    if {'Sales','Profit'}.issubset(seg.columns):
        seg['Gross_Margin_%'] = np.where(seg['Sales']!=0, (seg['Profit']/seg['Sales'])*100, np.nan)
    display(seg)

    # Line chart for Sales by Segment
    if 'Sales' in seg.columns:
        plt.figure(figsize=(8,5))
        plt.plot(seg.index.astype(str), seg['Sales'], marker='o', linestyle='-')
        plt.title('Sales by Segment')
        plt.xlabel('Segment'); plt.ylabel('Sales')
        plt.xticks(rotation=45); plt.grid(True)
        plt.tight_layout()
        plt.show()

    # Add space before the next chart
    plt.figure(figsize=(0.1,0.1))
    plt.axis('off')
    plt.show()

    # Line chart for Gross Margin % by Segment
    if 'Gross_Margin_%' in seg.columns:
        plt.figure(figsize=(8,5))
        plt.plot(seg.index.astype(str), seg['Gross_Margin_%'], marker='o', linestyle='-')
        plt.title('Gross Margin % by Segment')
        plt.xlabel('Segment'); plt.ylabel('Gross Margin %')
        plt.xticks(rotation=45); plt.grid(True)
        plt.tight_layout()
        plt.show()
else:
    print("Column 'Segment' not found; skipping segment analysis.")

# STEP 12 — Discount impact: Discount Rate % vs Gross Margin %
if {'Discount_Rate_%','Gross_Margin_%'}.issubset(df.columns):
    sample = df[['Discount_Rate_%','Gross_Margin_%']].dropna()
    print("Correlation (Pearson):", float(sample['Discount_Rate_%'].corr(sample['Gross_Margin_%'])))

    plt.figure()
    plt.scatter(sample['Discount_Rate_%'], sample['Gross_Margin_%'], s=12)
    plt.title('Discount Rate % vs Gross Margin %')
    plt.xlabel('Discount Rate %'); plt.ylabel('Gross Margin %'); plt.grid(True)
    plt.show()
else:
    print("Required columns not found; skipping discount impact scatter.")

# STEP 13 — Price vs Units Sold (scatter)
if {'Avg_Selling_Price','Units Sold'}.issubset(df.columns):
    plt.figure()
    plt.scatter(df['Avg_Selling_Price'], df['Units Sold'], s=12)
    plt.title('Average Selling Price vs Units Sold')
    plt.xlabel('Avg Selling Price'); plt.ylabel('Units Sold'); plt.grid(True)
    plt.show()
elif {'Sale Price','Units Sold'}.issubset(df.columns):
    plt.figure()
    plt.scatter(df['Sale Price'], df['Units Sold'], s=12)
    plt.title('Sale Price vs Units Sold')
    plt.xlabel('Sale Price'); plt.ylabel('Units Sold'); plt.grid(True)
    plt.show()
else:
    print("Price/Units columns not found; skipping scatter.")

# STEP 14 — Country x Year Profit heatmap (imshow)
if {'Country','Year','Profit'}.issubset(df.columns):
    top_countries = df.groupby('Country')['Profit'].sum().sort_values(ascending=False).head(12).index
    pivot = df[df['Country'].isin(top_countries)].pivot_table(index='Country', columns='Year', values='Profit', aggfunc='sum', fill_value=0)
    display(pivot)

    plt.figure()
    plt.imshow(pivot.values, aspect='auto')
    plt.title('Profit Heatmap — Top Countries x Year')
    plt.xlabel('Year'); plt.ylabel('Country')
    plt.xticks(ticks=range(len(pivot.columns)), labels=pivot.columns.astype(str), rotation=0)
    plt.yticks(ticks=range(len(pivot.index)), labels=pivot.index.astype(str))
    plt.colorbar(label='Profit')
    plt.show()
else:
    print("Needed columns not found; skipping heatmap.")

# STEP 15 — ABC classification on Products by Sales (Pareto)
if {'Product','Sales'}.issubset(df.columns):
    prod_sales = df.groupby('Product')['Sales'].sum().sort_values(ascending=False).reset_index()
    prod_sales['Sales_Share_%'] = (prod_sales['Sales'] / prod_sales['Sales'].sum())*100
    prod_sales['Cumulative_Share_%'] = prod_sales['Sales_Share_%'].cumsum()

    def abc_class(x):
        if x <= 80:
            return 'A'
        elif x <= 95:
            return 'B'
        else:
            return 'C'
    prod_sales['ABC'] = prod_sales['Cumulative_Share_%'].apply(abc_class)
    display(prod_sales.head(20))

    # Bar of sales by product (top 20)
    top20 = prod_sales.head(20)
    plt.figure()
    plt.bar(top20['Product'].astype(str), top20['Sales'])
    plt.title('Top 20 Products by Sales')
    plt.xlabel('Product'); plt.ylabel('Sales'); plt.xticks(rotation=60, ha='right'); plt.grid(axis='y')
    plt.show()

    # Cumulative share line for the same top 20 (separate chart)
    plt.figure()
    plt.plot(top20['Product'].astype(str), top20['Cumulative_Share_%'], marker='o')
    plt.title('Cumulative Sales Share (Top 20 Products)')
    plt.xlabel('Product'); plt.ylabel('Cumulative Share %'); plt.xticks(rotation=60, ha='right'); plt.grid(True)
    plt.show()
else:
    print("Columns 'Product' and/or 'Sales' not found; skipping ABC analysis.")

# STEP 16 — Monthly trend with rolling average (if Date available)
if 'Date' in df.columns and 'Sales' in df.columns:
    ts = df.set_index('Date').sort_index()
    # Sum by month
    monthly_ts = ts['Sales'].resample('MS').sum()
    display(monthly_ts.to_frame().head())

    # 3-month rolling average
    rolling = monthly_ts.rolling(window=3, min_periods=1).mean()

    plt.figure()
    plt.plot(monthly_ts.index, monthly_ts.values, label='Monthly Sales')
    plt.plot(rolling.index, rolling.values, label='3M Rolling Avg')
    plt.title('Monthly Sales & 3M Rolling Average')
    plt.xlabel('Date'); plt.ylabel('Sales'); plt.grid(True)
    plt.legend()
    plt.show()
else:
    print("Date/Sales not found; skipping monthly trend with rolling average.")

# STEP 17 — Save cleaned/augmented dataset (optional)
# This will help you reuse the processed file in future analysis.
out_path = '/content/Financials_cleaned.csv'  # change if needed
df.to_csv(out_path, index=False)
print(f"Cleaned file saved to: {out_path}")

!jupyter nbconvert --to script "Copy of Financials_Colab_Analysis.ipynb"